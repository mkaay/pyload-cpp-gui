/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef pyload_TYPES_H
#define pyload_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace Pyload {

struct DownloadStatus {
  enum type {
    Finished = 0,
    Offline = 1,
    Online = 2,
    Queued = 3,
    Skipped = 4,
    Waiting = 5,
    TempOffline = 6,
    Starting = 7,
    Failed = 8,
    Aborted = 9,
    Decrypting = 10,
    Custom = 11,
    Downloading = 12,
    Processing = 13,
    Unknown = 14
  };
};

extern const std::map<int, const char*> _DownloadStatus_VALUES_TO_NAMES;

struct Destination {
  enum type {
    Queue = 0,
    Collector = 1
  };
};

extern const std::map<int, const char*> _Destination_VALUES_TO_NAMES;

struct ElementType {
  enum type {
    Package = 0,
    File = 1
  };
};

extern const std::map<int, const char*> _ElementType_VALUES_TO_NAMES;

typedef int32_t FileID;

typedef int32_t PackageID;

typedef int32_t TaskID;

typedef std::vector<std::string>  LinkList;

typedef int8_t Progress;

typedef int8_t Priority;

typedef struct _DownloadInfo__isset {
  _DownloadInfo__isset() : fid(false), name(false), speed(false), eta(false), format_eta(false), bleft(false), size(false), format_size(false), percent(false), status(false), statusmsg(false), format_wait(false), wait_until(false), packageID(false) {}
  bool fid;
  bool name;
  bool speed;
  bool eta;
  bool format_eta;
  bool bleft;
  bool size;
  bool format_size;
  bool percent;
  bool status;
  bool statusmsg;
  bool format_wait;
  bool wait_until;
  bool packageID;
} _DownloadInfo__isset;

class DownloadInfo {
 public:

  static const char* ascii_fingerprint; // = "7B3313D7C4D7DBC99BF490AD2FC877FC";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0x33,0x13,0xD7,0xC4,0xD7,0xDB,0xC9,0x9B,0xF4,0x90,0xAD,0x2F,0xC8,0x77,0xFC};

  DownloadInfo() : fid(0), name(""), speed(0), eta(0), format_eta(""), bleft(0), size(0), format_size(""), percent(0), status((DownloadStatus::type)0), statusmsg(""), format_wait(""), wait_until(0), packageID(0) {
  }

  virtual ~DownloadInfo() throw() {}

  FileID fid;
  std::string name;
  int64_t speed;
  int32_t eta;
  std::string format_eta;
  int64_t bleft;
  int64_t size;
  std::string format_size;
  Progress percent;
  DownloadStatus::type status;
  std::string statusmsg;
  std::string format_wait;
  int64_t wait_until;
  PackageID packageID;

  _DownloadInfo__isset __isset;

  void __set_fid(const FileID val) {
    fid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_speed(const int64_t val) {
    speed = val;
  }

  void __set_eta(const int32_t val) {
    eta = val;
  }

  void __set_format_eta(const std::string& val) {
    format_eta = val;
  }

  void __set_bleft(const int64_t val) {
    bleft = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  void __set_format_size(const std::string& val) {
    format_size = val;
  }

  void __set_percent(const Progress val) {
    percent = val;
  }

  void __set_status(const DownloadStatus::type val) {
    status = val;
  }

  void __set_statusmsg(const std::string& val) {
    statusmsg = val;
  }

  void __set_format_wait(const std::string& val) {
    format_wait = val;
  }

  void __set_wait_until(const int64_t val) {
    wait_until = val;
  }

  void __set_packageID(const PackageID val) {
    packageID = val;
  }

  bool operator == (const DownloadInfo & rhs) const
  {
    if (!(fid == rhs.fid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(eta == rhs.eta))
      return false;
    if (!(format_eta == rhs.format_eta))
      return false;
    if (!(bleft == rhs.bleft))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(format_size == rhs.format_size))
      return false;
    if (!(percent == rhs.percent))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(statusmsg == rhs.statusmsg))
      return false;
    if (!(format_wait == rhs.format_wait))
      return false;
    if (!(wait_until == rhs.wait_until))
      return false;
    if (!(packageID == rhs.packageID))
      return false;
    return true;
  }
  bool operator != (const DownloadInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DownloadInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServerStatus__isset {
  _ServerStatus__isset() : pause(false), active(false), queue(false), total(false), speed(false), download(false), reconnect(false) {}
  bool pause;
  bool active;
  bool queue;
  bool total;
  bool speed;
  bool download;
  bool reconnect;
} _ServerStatus__isset;

class ServerStatus {
 public:

  static const char* ascii_fingerprint; // = "E31B1B109060290961235B52D95117A3";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x1B,0x1B,0x10,0x90,0x60,0x29,0x09,0x61,0x23,0x5B,0x52,0xD9,0x51,0x17,0xA3};

  ServerStatus() : pause(0), active(0), queue(0), total(0), speed(0), download(0), reconnect(0) {
  }

  virtual ~ServerStatus() throw() {}

  bool pause;
  int16_t active;
  int16_t queue;
  int16_t total;
  int32_t speed;
  bool download;
  bool reconnect;

  _ServerStatus__isset __isset;

  void __set_pause(const bool val) {
    pause = val;
  }

  void __set_active(const int16_t val) {
    active = val;
  }

  void __set_queue(const int16_t val) {
    queue = val;
  }

  void __set_total(const int16_t val) {
    total = val;
  }

  void __set_speed(const int32_t val) {
    speed = val;
  }

  void __set_download(const bool val) {
    download = val;
  }

  void __set_reconnect(const bool val) {
    reconnect = val;
  }

  bool operator == (const ServerStatus & rhs) const
  {
    if (!(pause == rhs.pause))
      return false;
    if (!(active == rhs.active))
      return false;
    if (!(queue == rhs.queue))
      return false;
    if (!(total == rhs.total))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(download == rhs.download))
      return false;
    if (!(reconnect == rhs.reconnect))
      return false;
    return true;
  }
  bool operator != (const ServerStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigItem__isset {
  _ConfigItem__isset() : name(false), description(false), value(false), type(false) {}
  bool name;
  bool description;
  bool value;
  bool type;
} _ConfigItem__isset;

class ConfigItem {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  ConfigItem() : name(""), description(""), value(""), type("") {
  }

  virtual ~ConfigItem() throw() {}

  std::string name;
  std::string description;
  std::string value;
  std::string type;

  _ConfigItem__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const ConfigItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ConfigItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigSection__isset {
  _ConfigSection__isset() : name(false), description(false), items(false) {}
  bool name;
  bool description;
  bool items;
} _ConfigSection__isset;

class ConfigSection {
 public:

  static const char* ascii_fingerprint; // = "6F4C9A3920D50E26C78816CC39D0B1BE";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x4C,0x9A,0x39,0x20,0xD5,0x0E,0x26,0xC7,0x88,0x16,0xCC,0x39,0xD0,0xB1,0xBE};

  ConfigSection() : name(""), description("") {
  }

  virtual ~ConfigSection() throw() {}

  std::string name;
  std::string description;
  std::vector<ConfigItem>  items;

  _ConfigSection__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  void __set_items(const std::vector<ConfigItem> & val) {
    items = val;
  }

  bool operator == (const ConfigSection & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const ConfigSection &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigSection & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileData__isset {
  _FileData__isset() : fid(false), url(false), name(false), plugin(false), size(false), format_size(false), status(false), statusmsg(false), packageID(false), error(false), order(false), progress(false) {}
  bool fid;
  bool url;
  bool name;
  bool plugin;
  bool size;
  bool format_size;
  bool status;
  bool statusmsg;
  bool packageID;
  bool error;
  bool order;
  bool progress;
} _FileData__isset;

class FileData {
 public:

  static const char* ascii_fingerprint; // = "FECBB8EE87F67C07F4FFE649DAC766F9";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xCB,0xB8,0xEE,0x87,0xF6,0x7C,0x07,0xF4,0xFF,0xE6,0x49,0xDA,0xC7,0x66,0xF9};

  FileData() : fid(0), url(""), name(""), plugin(""), size(0), format_size(""), status((DownloadStatus::type)0), statusmsg(""), packageID(0), error(""), order(0), progress(0) {
  }

  virtual ~FileData() throw() {}

  FileID fid;
  std::string url;
  std::string name;
  std::string plugin;
  int64_t size;
  std::string format_size;
  DownloadStatus::type status;
  std::string statusmsg;
  PackageID packageID;
  std::string error;
  int16_t order;
  Progress progress;

  _FileData__isset __isset;

  void __set_fid(const FileID val) {
    fid = val;
  }

  void __set_url(const std::string& val) {
    url = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_plugin(const std::string& val) {
    plugin = val;
  }

  void __set_size(const int64_t val) {
    size = val;
  }

  void __set_format_size(const std::string& val) {
    format_size = val;
  }

  void __set_status(const DownloadStatus::type val) {
    status = val;
  }

  void __set_statusmsg(const std::string& val) {
    statusmsg = val;
  }

  void __set_packageID(const PackageID val) {
    packageID = val;
  }

  void __set_error(const std::string& val) {
    error = val;
  }

  void __set_order(const int16_t val) {
    order = val;
  }

  void __set_progress(const Progress val) {
    progress = val;
  }

  bool operator == (const FileData & rhs) const
  {
    if (!(fid == rhs.fid))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(plugin == rhs.plugin))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(format_size == rhs.format_size))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(statusmsg == rhs.statusmsg))
      return false;
    if (!(packageID == rhs.packageID))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(order == rhs.order))
      return false;
    if (!(progress == rhs.progress))
      return false;
    return true;
  }
  bool operator != (const FileData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PackageData__isset {
  _PackageData__isset() : pid(false), name(false), folder(false), site(false), password(false), dest(false), order(false), priority(false), links(false) {}
  bool pid;
  bool name;
  bool folder;
  bool site;
  bool password;
  bool dest;
  bool order;
  bool priority;
  bool links;
} _PackageData__isset;

class PackageData {
 public:

  static const char* ascii_fingerprint; // = "A2275FDCAA9C382095B45BCBCDD6BB38";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x27,0x5F,0xDC,0xAA,0x9C,0x38,0x20,0x95,0xB4,0x5B,0xCB,0xCD,0xD6,0xBB,0x38};

  PackageData() : pid(0), name(""), folder(""), site(""), password(""), dest((Destination::type)0), order(0), priority(0) {
  }

  virtual ~PackageData() throw() {}

  PackageID pid;
  std::string name;
  std::string folder;
  std::string site;
  std::string password;
  Destination::type dest;
  int16_t order;
  Priority priority;
  std::vector<FileData>  links;

  _PackageData__isset __isset;

  void __set_pid(const PackageID val) {
    pid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_folder(const std::string& val) {
    folder = val;
  }

  void __set_site(const std::string& val) {
    site = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_dest(const Destination::type val) {
    dest = val;
  }

  void __set_order(const int16_t val) {
    order = val;
  }

  void __set_priority(const Priority val) {
    priority = val;
  }

  void __set_links(const std::vector<FileData> & val) {
    links = val;
  }

  bool operator == (const PackageData & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(folder == rhs.folder))
      return false;
    if (!(site == rhs.site))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(dest == rhs.dest))
      return false;
    if (!(order == rhs.order))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(links == rhs.links))
      return false;
    return true;
  }
  bool operator != (const PackageData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PackageData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PackageInfo__isset {
  _PackageInfo__isset() : pid(false), name(false), folder(false), site(false), password(false), dest(false), order(false), priority(false), links(false) {}
  bool pid;
  bool name;
  bool folder;
  bool site;
  bool password;
  bool dest;
  bool order;
  bool priority;
  bool links;
} _PackageInfo__isset;

class PackageInfo {
 public:

  static const char* ascii_fingerprint; // = "1D6DE69F3753831D7F5EE3A9E160396E";
  static const uint8_t binary_fingerprint[16]; // = {0x1D,0x6D,0xE6,0x9F,0x37,0x53,0x83,0x1D,0x7F,0x5E,0xE3,0xA9,0xE1,0x60,0x39,0x6E};

  PackageInfo() : pid(0), name(""), folder(""), site(""), password(""), dest((Destination::type)0), order(0), priority(0) {
  }

  virtual ~PackageInfo() throw() {}

  PackageID pid;
  std::string name;
  std::string folder;
  std::string site;
  std::string password;
  Destination::type dest;
  int16_t order;
  Priority priority;
  std::vector<FileID>  links;

  _PackageInfo__isset __isset;

  void __set_pid(const PackageID val) {
    pid = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_folder(const std::string& val) {
    folder = val;
  }

  void __set_site(const std::string& val) {
    site = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  void __set_dest(const Destination::type val) {
    dest = val;
  }

  void __set_order(const int16_t val) {
    order = val;
  }

  void __set_priority(const Priority val) {
    priority = val;
  }

  void __set_links(const std::vector<FileID> & val) {
    links = val;
  }

  bool operator == (const PackageInfo & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(folder == rhs.folder))
      return false;
    if (!(site == rhs.site))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(dest == rhs.dest))
      return false;
    if (!(order == rhs.order))
      return false;
    if (!(priority == rhs.priority))
      return false;
    if (!(links == rhs.links))
      return false;
    return true;
  }
  bool operator != (const PackageInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PackageInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CaptchaTask__isset {
  _CaptchaTask__isset() : tid(false), data(false), type(false) {}
  bool tid;
  bool data;
  bool type;
} _CaptchaTask__isset;

class CaptchaTask {
 public:

  static const char* ascii_fingerprint; // = "7C84316DF0F7A6ADA284840F5BBDA70B";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x84,0x31,0x6D,0xF0,0xF7,0xA6,0xAD,0xA2,0x84,0x84,0x0F,0x5B,0xBD,0xA7,0x0B};

  CaptchaTask() : tid(0), data(""), type("") {
  }

  virtual ~CaptchaTask() throw() {}

  int16_t tid;
  std::string data;
  std::string type;

  _CaptchaTask__isset __isset;

  void __set_tid(const int16_t val) {
    tid = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const CaptchaTask & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const CaptchaTask &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CaptchaTask & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Event__isset {
  _Event__isset() : event(false), id(false), type(false), destination(false) {}
  bool event;
  bool id;
  bool type;
  bool destination;
} _Event__isset;

class Event {
 public:

  static const char* ascii_fingerprint; // = "FC7AC933E295B4EBA8CAC312A9A06BA5";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0x7A,0xC9,0x33,0xE2,0x95,0xB4,0xEB,0xA8,0xCA,0xC3,0x12,0xA9,0xA0,0x6B,0xA5};

  Event() : event(""), id(0), type((ElementType::type)0), destination((Destination::type)0) {
  }

  virtual ~Event() throw() {}

  std::string event;
  int32_t id;
  ElementType::type type;
  Destination::type destination;

  _Event__isset __isset;

  void __set_event(const std::string& val) {
    event = val;
  }

  void __set_id(const int32_t val) {
    id = val;
    __isset.id = true;
  }

  void __set_type(const ElementType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_destination(const Destination::type val) {
    destination = val;
    __isset.destination = true;
  }

  bool operator == (const Event & rhs) const
  {
    if (!(event == rhs.event))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.destination != rhs.__isset.destination)
      return false;
    else if (__isset.destination && !(destination == rhs.destination))
      return false;
    return true;
  }
  bool operator != (const Event &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Event & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserData__isset {
  _UserData__isset() : name(false), email(false), role(false), permission(false), webtemplate(false) {}
  bool name;
  bool email;
  bool role;
  bool permission;
  bool webtemplate;
} _UserData__isset;

class UserData {
 public:

  static const char* ascii_fingerprint; // = "79B8231729AAFA85B85FA74A964A20B5";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0xB8,0x23,0x17,0x29,0xAA,0xFA,0x85,0xB8,0x5F,0xA7,0x4A,0x96,0x4A,0x20,0xB5};

  UserData() : name(""), email(""), role(0), permission(0), webtemplate("") {
  }

  virtual ~UserData() throw() {}

  std::string name;
  std::string email;
  int32_t role;
  int32_t permission;
  std::string webtemplate;

  _UserData__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_role(const int32_t val) {
    role = val;
  }

  void __set_permission(const int32_t val) {
    permission = val;
  }

  void __set_webtemplate(const std::string& val) {
    webtemplate = val;
  }

  bool operator == (const UserData & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(permission == rhs.permission))
      return false;
    if (!(webtemplate == rhs.webtemplate))
      return false;
    return true;
  }
  bool operator != (const UserData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountInfo__isset {
  _AccountInfo__isset() : validuntil(false), login(false), options(false), valid(false), trafficleft(false), maxtraffic(false), premium(false), type(false) {}
  bool validuntil;
  bool login;
  bool options;
  bool valid;
  bool trafficleft;
  bool maxtraffic;
  bool premium;
  bool type;
} _AccountInfo__isset;

class AccountInfo {
 public:

  static const char* ascii_fingerprint; // = "541C8740B9B05D597F292F0508C58814";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0x1C,0x87,0x40,0xB9,0xB0,0x5D,0x59,0x7F,0x29,0x2F,0x05,0x08,0xC5,0x88,0x14};

  AccountInfo() : validuntil(0), login(""), valid(0), trafficleft(0), maxtraffic(0), premium(0), type("") {
  }

  virtual ~AccountInfo() throw() {}

  int64_t validuntil;
  std::string login;
  std::map<std::string, std::string>  options;
  bool valid;
  int64_t trafficleft;
  int64_t maxtraffic;
  bool premium;
  std::string type;

  _AccountInfo__isset __isset;

  void __set_validuntil(const int64_t val) {
    validuntil = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_options(const std::map<std::string, std::string> & val) {
    options = val;
  }

  void __set_valid(const bool val) {
    valid = val;
  }

  void __set_trafficleft(const int64_t val) {
    trafficleft = val;
  }

  void __set_maxtraffic(const int64_t val) {
    maxtraffic = val;
  }

  void __set_premium(const bool val) {
    premium = val;
  }

  void __set_type(const std::string& val) {
    type = val;
  }

  bool operator == (const AccountInfo & rhs) const
  {
    if (!(validuntil == rhs.validuntil))
      return false;
    if (!(login == rhs.login))
      return false;
    if (!(options == rhs.options))
      return false;
    if (!(valid == rhs.valid))
      return false;
    if (!(trafficleft == rhs.trafficleft))
      return false;
    if (!(maxtraffic == rhs.maxtraffic))
      return false;
    if (!(premium == rhs.premium))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const AccountInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AccountData__isset {
  _AccountData__isset() : type(false), login(false), password(false), options(false) {}
  bool type;
  bool login;
  bool password;
  bool options;
} _AccountData__isset;

class AccountData {
 public:

  static const char* ascii_fingerprint; // = "912C4555CE89D387D601D42CB297EB54";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x2C,0x45,0x55,0xCE,0x89,0xD3,0x87,0xD6,0x01,0xD4,0x2C,0xB2,0x97,0xEB,0x54};

  AccountData() : type(""), login(""), password("") {
  }

  virtual ~AccountData() throw() {}

  std::string type;
  std::string login;
  std::string password;
  std::map<std::string, std::string>  options;

  _AccountData__isset __isset;

  void __set_type(const std::string& val) {
    type = val;
  }

  void __set_login(const std::string& val) {
    login = val;
  }

  void __set_password(const std::string& val) {
    password = val;
    __isset.password = true;
  }

  void __set_options(const std::map<std::string, std::string> & val) {
    options = val;
    __isset.options = true;
  }

  bool operator == (const AccountData & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(login == rhs.login))
      return false;
    if (__isset.password != rhs.__isset.password)
      return false;
    else if (__isset.password && !(password == rhs.password))
      return false;
    if (__isset.options != rhs.__isset.options)
      return false;
    else if (__isset.options && !(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const AccountData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceInfo__isset {
  _ServiceInfo__isset() : funcs(false) {}
  bool funcs;
} _ServiceInfo__isset;

class ServiceInfo {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  ServiceInfo() {
  }

  virtual ~ServiceInfo() throw() {}

  std::map<std::string, std::string>  funcs;

  _ServiceInfo__isset __isset;

  void __set_funcs(const std::map<std::string, std::string> & val) {
    funcs = val;
  }

  bool operator == (const ServiceInfo & rhs) const
  {
    if (!(funcs == rhs.funcs))
      return false;
    return true;
  }
  bool operator != (const ServiceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceCall__isset {
  _ServiceCall__isset() : plugin(false), func(false), arguments(false), parseArguments(false) {}
  bool plugin;
  bool func;
  bool arguments;
  bool parseArguments;
} _ServiceCall__isset;

class ServiceCall {
 public:

  static const char* ascii_fingerprint; // = "5CF4CC5F4B59F9DE54404CBEC4817C71";
  static const uint8_t binary_fingerprint[16]; // = {0x5C,0xF4,0xCC,0x5F,0x4B,0x59,0xF9,0xDE,0x54,0x40,0x4C,0xBE,0xC4,0x81,0x7C,0x71};

  ServiceCall() : plugin(""), func(""), parseArguments(0) {
  }

  virtual ~ServiceCall() throw() {}

  std::string plugin;
  std::string func;
  std::vector<std::string>  arguments;
  bool parseArguments;

  _ServiceCall__isset __isset;

  void __set_plugin(const std::string& val) {
    plugin = val;
  }

  void __set_func(const std::string& val) {
    func = val;
  }

  void __set_arguments(const std::vector<std::string> & val) {
    arguments = val;
    __isset.arguments = true;
  }

  void __set_parseArguments(const bool val) {
    parseArguments = val;
    __isset.parseArguments = true;
  }

  bool operator == (const ServiceCall & rhs) const
  {
    if (!(plugin == rhs.plugin))
      return false;
    if (!(func == rhs.func))
      return false;
    if (__isset.arguments != rhs.__isset.arguments)
      return false;
    else if (__isset.arguments && !(arguments == rhs.arguments))
      return false;
    if (__isset.parseArguments != rhs.__isset.parseArguments)
      return false;
    else if (__isset.parseArguments && !(parseArguments == rhs.parseArguments))
      return false;
    return true;
  }
  bool operator != (const ServiceCall &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceCall & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PackageDoesNotExists__isset {
  _PackageDoesNotExists__isset() : pid(false) {}
  bool pid;
} _PackageDoesNotExists__isset;

class PackageDoesNotExists : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  PackageDoesNotExists() : pid(0) {
  }

  virtual ~PackageDoesNotExists() throw() {}

  PackageID pid;

  _PackageDoesNotExists__isset __isset;

  void __set_pid(const PackageID val) {
    pid = val;
  }

  bool operator == (const PackageDoesNotExists & rhs) const
  {
    if (!(pid == rhs.pid))
      return false;
    return true;
  }
  bool operator != (const PackageDoesNotExists &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PackageDoesNotExists & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileDoesNotExists__isset {
  _FileDoesNotExists__isset() : fid(false) {}
  bool fid;
} _FileDoesNotExists__isset;

class FileDoesNotExists : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  FileDoesNotExists() : fid(0) {
  }

  virtual ~FileDoesNotExists() throw() {}

  FileID fid;

  _FileDoesNotExists__isset __isset;

  void __set_fid(const FileID val) {
    fid = val;
  }

  bool operator == (const FileDoesNotExists & rhs) const
  {
    if (!(fid == rhs.fid))
      return false;
    return true;
  }
  bool operator != (const FileDoesNotExists &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileDoesNotExists & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceDoesNotExists__isset {
  _ServiceDoesNotExists__isset() : plugin(false), func(false) {}
  bool plugin;
  bool func;
} _ServiceDoesNotExists__isset;

class ServiceDoesNotExists : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ServiceDoesNotExists() : plugin(""), func("") {
  }

  virtual ~ServiceDoesNotExists() throw() {}

  std::string plugin;
  std::string func;

  _ServiceDoesNotExists__isset __isset;

  void __set_plugin(const std::string& val) {
    plugin = val;
  }

  void __set_func(const std::string& val) {
    func = val;
  }

  bool operator == (const ServiceDoesNotExists & rhs) const
  {
    if (!(plugin == rhs.plugin))
      return false;
    if (!(func == rhs.func))
      return false;
    return true;
  }
  bool operator != (const ServiceDoesNotExists &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceDoesNotExists & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceException__isset {
  _ServiceException__isset() : msg(false) {}
  bool msg;
} _ServiceException__isset;

class ServiceException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ServiceException() : msg("") {
  }

  virtual ~ServiceException() throw() {}

  std::string msg;

  _ServiceException__isset __isset;

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const ServiceException & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
